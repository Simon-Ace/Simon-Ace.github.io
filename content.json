{"meta":{"title":"Rookie的博客","subtitle":"Stay hungry. Stay foolish.","description":null,"author":"Simon","url":"https://simon-ace.github.io","root":"/"},"pages":[],"posts":[{"title":"Hello World","slug":"hello-world","date":"2020-07-10T03:23:10.782Z","updated":"2020-07-10T03:23:10.782Z","comments":true,"path":"2020/07/10/hello-world/","link":"","permalink":"https://simon-ace.github.io/2020/07/10/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Linux统计文件夹下的文件数目","slug":"Linux统计文件夹下的文件数目","date":"2019-10-21T16:00:00.000Z","updated":"2020-07-10T03:23:10.780Z","comments":true,"path":"2019/10/22/Linux统计文件夹下的文件数目/","link":"","permalink":"https://simon-ace.github.io/2019/10/22/Linux统计文件夹下的文件数目/","excerpt":"1$ ls -l | grep &quot;^-&quot; | wc -l","text":"1$ ls -l | grep &quot;^-&quot; | wc -l 1 统计文件夹下的文件数目 统计当前目录下文件的个数（不包括目录） 1$ ls -l | grep &quot;^-&quot; | wc -l 统计当前目录下文件的个数（包括子目录） 1$ ls -lR| grep &quot;^-&quot; | wc -l 查看某目录下文件夹(目录)的个数（包括子目录） 1$ ls -lR | grep &quot;^d&quot; | wc -l 命令原理： ls -l 详细输出该文件夹下文件信息 ls -lR是列出所有文件，包括子目录 grep &quot;^-&quot; 过滤ls的输出信息，只保留一般文件；只保留目录是grep &quot;^d&quot; wc -l 统计输出信息的行数","categories":[{"name":"Linux","slug":"Linux","permalink":"https://simon-ace.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://simon-ace.github.io/tags/Linux/"}]},{"title":"Linux后台执行命令","slug":"Linux后台执行命令","date":"2019-10-21T16:00:00.000Z","updated":"2020-07-10T03:23:10.779Z","comments":true,"path":"2019/10/22/Linux后台执行命令/","link":"","permalink":"https://simon-ace.github.io/2019/10/22/Linux后台执行命令/","excerpt":"当在终端工作时，可能一个持续运行的作业占住屏幕输出，或终端退出时导致命令结束。为了避免这些问题，可以将这些进程放到后台运行，且不受终端关闭的影响，可使用下面的方法： 1nohup command &gt; myout.file 2&gt;&amp;1 &amp;","text":"当在终端工作时，可能一个持续运行的作业占住屏幕输出，或终端退出时导致命令结束。为了避免这些问题，可以将这些进程放到后台运行，且不受终端关闭的影响，可使用下面的方法： 1nohup command &gt; myout.file 2&gt;&amp;1 &amp; 1 后台执行命令1.1 命令&amp;在命令后面加上&amp;实现后台运行（控制台关掉(退出帐户时)，作业就会停止运行） 1command &amp; 例：python run.py &amp; 1.2 命令nohupnohup命令可以在你退出帐户之后继续运行相应的进程。nohup就是不挂起的意思( no hang up) 1nohup command &amp; 例：nohup run.py &amp; 2 kill进程执行后台任务命令后，会返回一个进程号，可通过这个进程号kill掉进程。 1kill -9 进程号 3 输出重定向由于使用前面的命令将任务放到后台运行，因此任务的输出也不打印到屏幕上了，所以需要将输出重定向到文件中，以方便查看输出内容。 将输出重定向到 file（覆盖） 1command1 &gt; file1 将输出重定向到 file（追加） 1command1 &gt;&gt; file1 将 stdout 和 stderr 合并后重定向到 file 2&gt;1代表什么，2与&gt;结合代表错误重定向，而1则代表错误重定向到一个文件1，而不代表标准输出；换成2&gt;&amp;1，&amp;与1结合就代表标准输出了，就变成错误重定向到标准输出. 1command1 &gt; file1 2&gt;&amp;1 完整写法： 1nohup command &gt;out.file 2&gt;&amp;1 &amp; 4 其他 nohup执行python程序时，print无法输出 这是因为python的输出有缓冲，导致nohup.out并不能够马上看到输出 python 有个-u参数，使得python不启用缓冲 nohup python -u test.py &gt; nohup.out 2&gt;&amp;1 &amp;","categories":[{"name":"Linux","slug":"Linux","permalink":"https://simon-ace.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://simon-ace.github.io/tags/Linux/"}]},{"title":"Python打印更详细的异常信息","slug":"Python打印更详细的异常信息","date":"2019-10-20T16:00:00.000Z","updated":"2020-07-10T03:23:10.782Z","comments":true,"path":"2019/10/21/Python打印更详细的异常信息/","link":"","permalink":"https://simon-ace.github.io/2019/10/21/Python打印更详细的异常信息/","excerpt":"打印Python异常信息的几种方式","text":"打印Python异常信息的几种方式 1 简单的异常信息1234try: a = 1/0except Exception as e: print(e) 打印最简单的message信息： 1division by zero 2 更完整的信息12345678910import tracebacktry: a = 1/0except Exception as e: print('str(e):\\t', e) print('repr(e):\\t', repr(e)) print('traceback.format_exc():\\n%s' % traceback.format_exc()) #字符串 traceback.print_exc() #执行函数 输出： 123456789101112str(e): division by zerorepr(e): ZeroDivisionError(&apos;division by zero&apos;)traceback.format_exc():Traceback (most recent call last): File &quot;/Users/ace/Play/test/异常信息.py&quot;, line 4, in &lt;module&gt; a = 1/0ZeroDivisionError: division by zeroTraceback (most recent call last): File &quot;/Users/ace/Play/test/异常信息.py&quot;, line 4, in &lt;module&gt; a = 1/0ZeroDivisionError: division by zero traceback.format_exc()和traceback.print_exc()都可以打印完整的错误信息 traceback.format_exc()返回值为字符串 traceback.print_exc()是一个执行函数，直接在控制台打印错误信息","categories":[{"name":"Python","slug":"Python","permalink":"https://simon-ace.github.io/categories/Python/"}],"tags":[{"name":"Python, 异常","slug":"Python-异常","permalink":"https://simon-ace.github.io/tags/Python-异常/"}]},{"title":"【转】持续集成 Continuous Integration","slug":"持续集成 Continuous Integration","date":"2019-10-17T16:00:00.000Z","updated":"2020-07-10T03:23:10.782Z","comments":true,"path":"2019/10/18/持续集成 Continuous Integration/","link":"","permalink":"https://simon-ace.github.io/2019/10/18/持续集成 Continuous Integration/","excerpt":"持续集成 Continuous Integration","text":"持续集成 Continuous Integration","categories":[{"name":"教程","slug":"教程","permalink":"https://simon-ace.github.io/categories/教程/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://simon-ace.github.io/tags/Hexo/"}]},{"title":"Hexo多台电脑同步","slug":"Hexo多台电脑同步","date":"2019-10-15T16:00:00.000Z","updated":"2020-07-10T03:23:10.778Z","comments":true,"path":"2019/10/16/Hexo多台电脑同步/","link":"","permalink":"https://simon-ace.github.io/2019/10/16/Hexo多台电脑同步/","excerpt":"如果换了电脑该如何同步Hexo的源文件？把hexo文件从一个电脑cope到另外一个电脑吗？答案肯定不是这样的，因为这里面有好多依赖包，好几万个文件呢，这样显然不合理。 本文提供一种多台电脑同步源文件的方法。","text":"如果换了电脑该如何同步Hexo的源文件？把hexo文件从一个电脑cope到另外一个电脑吗？答案肯定不是这样的，因为这里面有好多依赖包，好几万个文件呢，这样显然不合理。 本文提供一种多台电脑同步源文件的方法。 0 解决思路使用GitHub的分支！在博客对应的仓库中新建一个分支。一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。 1 创建分支1.1 创建新分支命令行操作： GitHub操作： 点击branch按钮，输入新的分支名source，点创建。 1.2 设置默认分支准备在source分支中存放源文件，master中存放生成的网页，因此将source设置为默认分支，方便同步文件。 在仓库-&gt;Settings-&gt;Branches-&gt;Default branch中将默认分支设为source，save保存 2 源文件上传到GitHub 选好一个本地文件夹，执行 git clone git@github.com:Simon-Ace/Simon-Ace.github.io.git(替换成你的仓库) 在克隆到本地的Simon-Ace.github.io中，把除了.git 文件夹外的所有文件都删掉 把之前我们写的博客源文件全部复制过来，除了.deploy_git 复制过来的源文件应该有一个.gitignore，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git： 1234567.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/ 注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉，因为git不能嵌套上传。 提交更改 123git add .git commit –m \"add branch\"git push 参考文章： https://juejin.im/post/5acf22e6f265da23994eeac9 https://www.zhihu.com/question/21193762","categories":[{"name":"教程","slug":"教程","permalink":"https://simon-ace.github.io/categories/教程/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://simon-ace.github.io/tags/Hexo/"}]},{"title":"Python-加快pip安装速度","slug":"tutorials/Python-加快pip安装速度","date":"2019-10-15T16:00:00.000Z","updated":"2020-07-10T03:23:10.782Z","comments":true,"path":"2019/10/16/tutorials/Python-加快pip安装速度/","link":"","permalink":"https://simon-ace.github.io/2019/10/16/tutorials/Python-加快pip安装速度/","excerpt":"PIP安装时使用国内镜像，加快下载速度","text":"PIP安装时使用国内镜像，加快下载速度 0 国内源清华：https://pypi.tuna.tsinghua.edu.cn/simple 阿里云：http://mirrors.aliyun.com/pypi/simple/ 中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/ 华中理工大学：http://pypi.hustunique.com/ 山东理工大学：http://pypi.sdutlinux.org/ 豆瓣：http://pypi.douban.com/simple/ 1 临时使用 可以在使用pip的时候加参数-i https://pypi.tuna.tsinghua.edu.cn/simple 例如： pip install -i https://pypi.tuna.tsinghua.edu.cn/simple numpy 2 永久修改这样就不用每次都添加国内镜像源地址了 Linux下，修改~/.pip/pip.conf（没有就创建一个文件夹及文件） 打开文件，添加内容： 1234[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple[install]trusted-host=mirrors.aliyun.com windows下，直接在user目录中创建一个pip目录，如：C:\\Users\\xx\\pip，新建文件pip.ini， 内容同上","categories":[{"name":"教程","slug":"教程","permalink":"https://simon-ace.github.io/categories/教程/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://simon-ace.github.io/tags/Hexo/"}]},{"title":"一台电脑配置多个git账号","slug":"配置多个git账号","date":"2019-10-13T16:00:00.000Z","updated":"2020-07-10T03:28:22.702Z","comments":true,"path":"2019/10/14/配置多个git账号/","link":"","permalink":"https://simon-ace.github.io/2019/10/14/配置多个git账号/","excerpt":"1 清除git全局设置如果配置第一个账号的时候使用git config --global设置过，就先要取消掉，否则两个账号肯定会冲突 123# 取消globalgit config --global --unset user.namegit config --global --unset user.email","text":"1 清除git全局设置如果配置第一个账号的时候使用git config --global设置过，就先要取消掉，否则两个账号肯定会冲突 123# 取消globalgit config --global --unset user.namegit config --global --unset user.email 2 生成新账号的SSH keys2.1 用 ssh-keygen 命令生成密钥1$ ssh-keygen -t rsa -C \"new email\" 平时都是直接回车，默认生成 id_rsa 和 id_rsa.pub。这里特别需要注意，出现提示输入文件名的时候(Enter file in which to save the key (~/.ssh/id_rsa): id_rsa_new)要输入与默认配置不一样的文件名，比如：我这里填的是 id_rsa和id_rsa_me。 如果之前没配置过ssh key，这里用不同邮箱生成两遍即可，注意用不同的文件名 成功后会出现： 12Your identification has been saved in xxx.Your public key has been saved in xxx. 2.2 添加到ssh-agent中使用ssh-add将 IdentityFile 添加到 ssh-agent中 12ssh-add ~/.ssh/id_rsassh-add ~/.ssh/id_rsa_me 2.3 配置 ~/.ssh/config 文件在~/.ssh/下新建config文件 1234567891011# The git info for companyHost git.XXX.com # git别名，写公司的git名字即可HostName git.XXX.com # git名字，同样写公司的git名字User git # 写 git 即可IdentityFile ~/.ssh/id_rsa #私钥路径，若写错会连接失败# The git info for github Host github.com # git别名，写github的git名字即可HostName github.com # git名字，同样写github的git名字User git # 写 git 即可IdentityFile ~/.ssh/id_rsa_me #私钥路径，若写错会连接失败 3 与GitHub链接复制刚刚生成的两个ssh公钥到对应的账号中 文件id_rsa.pub中保存的就是 ssh 公钥 12pbcopy &lt; ~/.ssh/id_rsa.pubpbcopy &lt; ~/.ssh/id_rsa_me.pub 在 github 网站中添加该 ssh 公钥 验证是否配置成功，以 github 为例，输入 ssh -T git@github.com，若出现 1Hi xxx! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 这样的字段，即说明配置成功。另一个同理。 参考链接： 配置多个git账号的ssh密钥 - 掘金https://juejin.im/post/5befe84d51882557795cc8f9 同一台电脑配置多个git账号 · Issue #2 · jawil/noteshttps://github.com/jawil/notes/issues/2","categories":[{"name":"教程","slug":"教程","permalink":"https://simon-ace.github.io/categories/教程/"}],"tags":[{"name":"git","slug":"git","permalink":"https://simon-ace.github.io/tags/git/"}]}]}